// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  books     Book[]
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
    id String    @id @default(cuid()) @map("_id")
    title String 
    totalPages Int
    pages Page[]
    savedWords SavedWord[]
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    bookSession BookSession?
}

model Page {
    id String    @id @default(cuid()) @map("_id")
    pageNumber Int
    words Word[]
    bookId String @unique
    book Book @relation(fields: [bookId], references: [id])
}

model Word {
   id String    @id @default(cuid()) @map("_id")
   isTranslated Boolean
   content String
   translation String
   pageId String @unique
   page Page @relation(fields: [pageId], references: [id])
}

 model SavedWord {
    id String    @id @default(cuid()) @map("_id")
    content String
    translation String
    bookId String @unique
    book Book @relation(fields: [bookId], references: [id])
}

model BookSession {
    id String    @id @default(cuid()) @map("_id")
    currentPage Int
    totalPages Int
    progress Int
    bookId String @unique
    book Book @relation(fields: [bookId], references: [id])
}
